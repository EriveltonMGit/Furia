// src/app/lib/chat.ts - Wrapper para a l√≥gica Server-Side do Gemini
// Este arquivo N√ÉO DEVE TER 'use client'.
// Ele √© importado pela rota de API e chama a l√≥gica server-side.

// ‚úÖ Importa as fun√ß√µes do novo arquivo server-side
import { generateGeminiResponse, clearChatHistory as clearServerChatHistory } from "./gemini";

// Fun√ß√£o que serve como wrapper para generateGeminiResponse
// √â chamada pela rota de API.
export async function generateChatResponse(message: string, userName?: string): Promise<string> {
  try {
    // Chama a l√≥gica server-side para gerar a resposta
    const response = await generateGeminiResponse(message, userName);
    return response;
  } catch (error) {
    console.error("Erro ao gerar resposta no wrapper chat.ts:", error);
    // generateGeminiResponse j√° trata os erros internos e retorna um fallback.
    // Este catch √© para erros ANTES ou DURANTE a chamada a generateGeminiResponse.
    return "Desculpe, estou enfrentando um problema inesperado no servi√ßo de chat. Tente novamente mais tarde. #DIADEFURIA üêÜ";
  }
}

// ‚úÖ Exporta a fun√ß√£o de limpeza do hist√≥rico do lado do SERVIDOR
// Renomeada para deixar claro que limpa o hist√≥rico na inst√¢ncia atual do servidor
export function clearChatHistory(): void {
    clearServerChatHistory();
}

// // Se voc√™ tiver um endpoint POST separado para limpar o chat (ex: /api/chat/reset),
// // a rota de API chamaria diretamente a fun√ß√£o clearChatHistory exportada acima.